

1.Определить требования задачи:

                                Описание - книжный интернет магазин.

Магазин будет предоставлять пользователю возможность зарегистрироваться на сайте и перейти в раздел книг
или корзину.Также пользователь сможет просматривать сайт без регистрации.
Книги должны быть разделены по категориям(пример Худ. литература, научная литература и т.д. )
При добавлении новой книги в категорию она становится на первое место в категории,
а остальные книги перемещаются на позицию назад. Каждая книга будет иметь рейтинг  который будет состоять из
времени добавления, популярности – просмотров, количества заказов.
Параметры поиска книг: по автору, по названию, по фразе, по популярности .....
Пользователь будет выбирать книги, добавляя их в корзину. Через корзину можно будет произвести покупку книги
или удалять книги из корзины. Все покупки будут храниться в истории покупок пользователя.
Также должна быть история просмотренных книг пользователем, время нахождения в определенной категории, фразы поиска.
При добавлении новых книг на сайте с похожими фразам поиска будет собрана подборка и отправлена пользователю на почту.
Два варианта оплаты, наличными при получении товара или через электронный перевод.

  - Регистрация пользователя(User Registration)
     - Пользователь нажимает кнопку "Регистрация" - открывается окно с полями "Имя:","Mail:","Пароль:" и кнопкой "Зарегистрироваться".
        поле "Имя" - имя пользователя может быть длинной не менее 6 и не более 20 символов(Буквы и цифры, лат. или кириллица.)
        поле "Mail" - должен быть настоящим и уникальным (не может быть несколько пользователей с одинаковым mail адресом)
        поле "Пароль" - длинна пароля от 6 и до 50 символов(Буквы и цифры, лат. или кириллица.)
     - После того как пользователь заполнил поля и нажал кнопку "Зарегистрироваться", ему на указанный mail отправляется письмо для подтверждения регистрации.  ///??? спросить как это делать.
        если в течении 24 часов пользователь не подтвердил регистрацию, то на почту отправляется повторное письмо с просьбой подтверждения регистрации.
     - После подтверждения регистрации пользователь добавляется в базу пользователей(UserBase) // уточнить где хранятся данные о пользователе до подтверждения регистрации, или создать временную базу?


2.Этап проектирования.
Определение сущностей:
-----------------------------------------------------------------------------------------------------

Регистрация:

       - Пользователь (IUser)  - содержится информацию о пользователе (Имя, пароль, mail).
            Fields:
            - int  id        ? уточнить нужен ли id
            - String name
            - String email
            - String password
            Methods:
            - get and set(name,email,password)

       - База пользователей (IUsersDao) - все новые пользователи прошедшие регистрацию добавляются в базу.
            Field:
            - Set<IUser> base;
            Methods:
            - void addUser(IUser user);
            - void deleteUser(IUser user);
            - boolean containsUser(String email);


       - Проверки на валидность (IValidation) - только методы с проверками. При создании нового пользователя все поля класса User должны пройти проверку на валидность.
         Проверка "Имя" - имя пользователя может быть длинной не менее 6 и не более 20 символов(Буквы и цифры, лат. или кириллица.), проверка "Mail" - долженбыть настоящим
         и уникальным, "Пароль" - длинна пароля от 6 и до 50 символов(Буквы и цифры, лат. или кириллица.)
            Fields:

            Methods:
            boolean validateName(String name, IPattern namePattern);
            boolean validateEmail(String email, IPattern emailPattern);
            boolean validatePassword(String pass, IPattern passPattern);
            boolean checkEmail(String email);

       - Новая валидация -
       - Проверки на валидность (IValidation) - только методы с проверками. При создании нового пользователя все поля класса User должны пройти проверку на валидность.
         Проверка "Имя" - имя пользователя может быть длинной не менее 6 и не более 20 символов(Буквы и цифры, лат. или кириллица.), проверка "Mail" - долженбыть настоящим
         и уникальным, "Пароль" - длинна пароля от 6 и до 50 символов(Буквы и цифры, лат. или кириллица.)

         interface IValidation
         Methods:
         validate(IUser user) throws ValidationException;
           interface INameValidation implements IValidation
           Methods:
           - validateName(IUser user);
           interface IEmailValidation implements IValidation
           Methods:
           - validateEmail(IUser user);
           interface IPassValidation implements IValidation
           Methods:
           - validateEmail(IUser user);
           interface ICompositeValidation implements IValidation
           Methods:
           - validateComposite(IUser user);

       - Регистрация (IRegistration) - создает поля name,email и password - вызывет методы валидации и добавляет нового пользователя в базу пользователей(UsersBase).
        Если пользователь с указанным email уже существует, тоосается EmailAlreadyExistException
           Fields:
           -
           Methods:
           - void createUser(String name, String pass, String email);



-----------------------------------------------------------------------------------------------------

2.Этап проектирования.
Определение сущностей:
----------------------------------------------------------------------------------------------------
       - Пользователь (IUser)  - Сущность содержит информацию о пользователе (Имя, пароль, mail, история, корзина).
            Fields:
            - int  index
            - String name
            - String email      ?
            - String password   ?
            - IHistory history;
            Methods:
            - get and set(name,email,password)
            -
----------------------------------------------------------------------------------------------------
       - База пользователей (IUserBase) - служит хранилищем зарегистрированных пользователей;
            Fields:
            - List<IUser> BaseUsers;
            Method:
            - boolean addUser(IUser user);
            - boolean contain(IUser user);
            - boolean deleteUser(IUser user);

----------------------------------------------------------------------------------------------------
       - Личный кабинет(IPrivateOffice) - Позволяет пользователю добавлять и удалять книги в/из корзину,
         редактировать персональные данные о пользователя(Имя, пароль, mail).
           Fields:
           -
           Methods:
           - boolean ChangeName(String name);
           - boolean ChangePass( String oldPass, String newPass);
           - boolean ChangeEmail( String email);
           - boolean addBookToBasket(IBook book);
           - boolean deleteBookFromBasket(IBook book);
           - boolean clearBasket();

----------------------------------------------------------------------------------------------------
       - Интерфейс (UI) - предоставляет пользователю доступ к категории, поиск, корзина, личный кабинет, оплата
            fields:
            - ?
            Methods:

----------------------------------------------------------------------------------------------------
       - Корзина(IBasket) - сущность корзина содержит поля и методы для работы с корзиной пользователя(добавление, удаление,очистка, поиск)
            fields:
            -List<IBook> listBooks;
            Method:
            - boolean addBook(IBook book);
            - boolean deleteBook(IBook book);
            - IBook getBook(int index);
            - boolean clear();
            - boolean contain(IBook book);
----------------------------------------------------------------------------------------------------
       - Книга  (IBook) - сущность представляет книгу, содержит название книги, автора, список слов для поиска, дату добавления, описание, фото книги
            fields:
            - String name;
            - String author;
            - List<String> searchWords;
            - Date date;
            - Description description;
            - File file;
            methods:
            -get and set (name, author)
            -void
----------------------------------------------------------------------------------------------------
       - Категория   (ICategory) -

----------------------------------------------------------------------------------------------------

- Позиция книги

----------------------------------------------------------------------------------------------------

- Рейтинг книги

----------------------------------------------------------------------------------------------------

- Почтовый робот

----------------------------------------------------------------------------------------------------

- Заказ

----------------------------------------------------------------------------------------------------

- Поиск

----------------------------------------------------------------------------------------------------

- История пользователя

----------------------------------------------------------------------------------------------------

- Хранилище

----------------------------------------------------------------------------------------------------
- Описание (IDescription)